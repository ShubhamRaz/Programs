import numpy as np

# Define the Perceptron class
class Perceptron:
    def __init__(self, learning_rate=0.01, epochs=1000):
        self.learning_rate = learning_rate
        self.epochs = epochs
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        # Initialize weights and bias
        n_samples, n_features = X.shape
        self.weights = np.zeros(n_features)
        self.bias = 0

        # Training the perceptron
        for _ in range(self.epochs):
            for idx, x_i in enumerate(X):
                linear_output = np.dot(x_i, self.weights) + self.bias
                y_predicted = self._activation_function(linear_output)

                # Update weights and bias if there's an error
                update = self.learning_rate * (y[idx] - y_predicted)
                self.weights += update * x_i
                self.bias += update

    def predict(self, X):
        linear_output = np.dot(X, self.weights) + self.bias
        return self._activation_function(linear_output)

    def _activation_function(self, x):
        # Step activation function
        return np.where(x >= 0, 1, 0)


# Example usage
if __name__ == "__main__":
    # Define dataset
    # Features (X) and labels (y)
    X = np.array([[1, 1], [1, 0], [0, 1], [0, 0]])  # Example: AND gate
    y = np.array([1, 0, 0, 0])  # Output of AND gate

    # Create and train Perceptron
    perceptron = Perceptron(learning_rate=0.1, epochs=10)
    perceptron.fit(X, y)

    # Test predictions
    predictions = perceptron.predict(X)
    print("Predictions:", predictions)

    # Check weights and bias
    print("Weights:", perceptron.weights)
    print("Bias:", perceptron.bias)
